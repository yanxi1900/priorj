<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="lab1" default="all" basedir=".">
  
  <property name="proj.name" value="priorj"/>
  <property name="source.dir" location="src"/>
  <property name="build.dir" location="bin"/>
  <property name="doc.dir" location="doc"/>
  <property name="dist.dir" location="dist"/>
  <property name="lib.dir" value="lib"/>
  <property name="test.dir" location="test"/>
  <property name="report.dir" location="report"/>
  <property name="workspace.dir" location="workspace"/>
  <property name="main.class" value="main.Main"/>
	
  
  <!-- target clean - clean the directory and workspace -->
  <target name="limpa" description="cleaning the workspace">
    <echo> Cleaning the project... </echo>
    <delete dir="${build.dir}"/>
    <delete dir="${doc.dir}"/>
    <delete dir="${dist.dir}"/>
  	<delete dir="${report.dir}"/>
  	<delete dir="${workspace.dir}"/>
    <delete>
      <fileset defaultexcludes="no" dir="${source.dir}" includes="**/*~"/>
      <fileset defaultexcludes="no" dir="${test.dir}" includes="**/*~"/>
    </delete>
   <echo> Project cleaned. </echo>
  </target>

  <!-- target init - create the directory to compilation process -->
  <target name="init" description="prepara os diretorios de compilacao">
    <echo> Creating folders bin, dist, report and doc ... </echo>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${doc.dir}"/>
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${report.dir}"/>
    <echo> Folders created. </echo>
  </target>

  <!-- target compila - generating the .class into (bin)-->
  <target name="compila" depends="init" description="compiling the java source code">
    <echo> Compiling the project... </echo>
  	<path id="lib">
  		<fileset dir="${lib.dir}" includes="*.jar"/>
  		<fileset dir="lib" includes="*.jar"/>
  	</path>	
    <javac srcdir="${source.dir}" destdir="${build.dir}" includeantruntime="false" classpathref="lib"/>
      
    <echo> Project compiled. </echo>
  </target>

<target name="compila-teste" depends="init" description="compiling the java source code">
    <echo> Compiling the project... </echo>
    <path id="lib">
      <fileset dir="${lib.dir}" includes="*.jar"/>
      <fileset dir="lib" includes="*.jar"/>
    </path> 
    <javac srcdir="${test.dir}" destdir="${build.dir}" includeantruntime="false" classpathref="lib"/>
      
    <echo> Project compiled. </echo>
  </target>


  <!-- target doc - generate project javadoc into ${doc.dir} -->
  <target name="doc" depends="init" description="generate documentation">
    <echo> Generating the javadoc </echo>
    <javadoc sourcepath="${source.dir}" destdir="${doc.dir}"/>
    <echo> Javadoc generated. </echo>
  </target>

  <!-- target dist - generate the dist.jar into ${build.dir}" -->
  <target name="dist" depends="compila">
    <echo> Generating dist (.jar package)  ...</echo>    
    <jar jarfile="${dist.dir}/lab1.jar" basedir="${build.dir}">

	<!-- turn the jar executable -->
    <manifest>
     <attribute name="Main-Class" value="${main.class}"/>
     </manifest>
     </jar>
   <echo> Dist generated with success. </echo>
  </target>  
  
	<!-- target run - Executes the current project -->
  <target name="executa" description="run the project" depends="compila">
   <echo> Running the project... </echo>
    <java dir="${build.dir}" classname="${main.class}" fork="yes">
        <arg line="${args}"/>
    </java>
   <echo> Project executed with success. </echo>
  </target>

	<!-- target testa - run the tests project -->
	<target name="testa" depends="compila, compila-teste" >
	    <junit printsummary="yes" haltonfailure="no">
	    	<formatter type="xml"/>
	      <classpath>
	      	<fileset dir="${lib.dir}" includes="*.jar" />
	        <pathelement location="${build.dir}"/>
	      	<pathelement location="${test.dir}"/>
	      </classpath>
	      <batchtest fork="yes" todir="${report.dir}">
	      	<fileset dir="${build.dir}" includes="**/*Test*.class"/>
	      </batchtest>
	    </junit>
      <junitreport todir="./report">
          <fileset dir="./report">
              <include name="TEST-*.xml"/>
          </fileset>
          <report format="noframes" todir="./report/html"/>
      </junitreport>
  </target>

  <!-- target all - Starts the ant build file execution -->
  <target name="all" depends="limpa, compila, testa, executa">
   <echo> Executing app... </echo>
   <java jar="${dist.dir}/HelloAnt.jar" fork="true"/>
   <echo> App executed. </echo>
  </target>
  
</project>
