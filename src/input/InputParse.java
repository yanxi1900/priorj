package input;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.apache.tools.ant.types.FileList.FileName;

import coverage.ClassCode;
import coverage.Method;
import coverage.Statement;
import coverage.TestCase;
import coverage.TestSuite;

import util.FileManager;

/*
 * PriorJ: JUnit Test Case Prioritization.
 * 
 * Copyright (C) 2012-2013  Samuel T. C. Santos
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/**
 * This class read a PriorJ configurations file and do a parse.
 * 
 * @author Samuel T. C. Santos
 * @version 1.0
 */

public class InputParse {

	/**
	 * Path to configuration file.
	 */
	String configFile;
	
	/**
	 * Type of parse will be executed by tool.
	 */
	String type;
	
	/**
	 * Test Suite for SUT generated by parse.
	 */
	private List<TestSuite> suites;

	/**
	 * objects found in the configurations file.
	 */
	List<InputObject> listParse;

	/**
	 * Construct default.
	 */
	public InputParse(){
		listParse = new ArrayList<InputObject>();
		suites = new ArrayList<TestSuite>();
	}
	
	/**
	 * Construct to Input parse with configuration file path.
	 * 
	 * @param filename
	 *            The configuration file path.
	 */
	public InputParse(String filename) {
		this();
		configFile = filename;
	}
	
	/**
	 * Constructor to input parse with configuration file path and
	 * type of parameter, when the parameter is of kind "testsuite",
	 * this parse will be generate a Test Suite.
	 * 
	 * @param filename
	 * 		The input file name.
	 * @param parseType
	 * 		The parameter to parse type.
	 */
	public InputParse(String filename, String parseType){
		this();
		this.configFile = filename;
		this.type = parseType;
	}
	
	/**
	 * This method do the parse process.
	 */
	public void runParse() {
		if ( checkFile()) 
			doParse();
	}

	/**
	 * This method verify the configuration file.
	 * 
	 * @return
	 */
	public boolean checkFile() {
		return FileManager.existFileOrDirectory(configFile);
	}

	/**
	 * Do parse.
	 */
	private void doParse() {
		 
        try {
            BufferedReader in = new BufferedReader(new FileReader(configFile));
            String line;
            while (in.ready()) {
                line = in.readLine();
                
            	if (isParseToTestSuite())
            		handlerInputSUT(line);
            	else
            		handlerInput(line);
                
            }
            in.close();
            
        } catch (IOException e) {
            System.out.println("error in the parse: " + e.getMessage());
        }
	}
	
	private boolean isParseToTestSuite(){
		return type.equals("testsuite");
	}
	
	/**
	 * 
	 * This method is a handler input.
	 * 
	 * @param line
	 */
	private void handlerInput(String line) {
		InputObject inputObj = lineParse(line);
		
		if (!inputObj.isEmpty())
			listParse.add(inputObj);
	}
	
	public void handlerInputSUT(String line){
		
		InputObject in = lineParse(line);
	
		String property = in.getProperty();
		String value = in.getValue();
		
		if (property.equalsIgnoreCase("test_suite_name")){
			 handlerInputTestSuite(value);
		}
		else if (property.equalsIgnoreCase("test_case_name")){
			handlerInputTestCase(value);
		}
		else if (property.equalsIgnoreCase("class_code_name")){
			handlerInputClassCode(value);
		}
		else if (property.equalsIgnoreCase("method_name")){
			handlerInputMethod(value);
		}
		else if (property.equalsIgnoreCase("statements_numbers")){
			handlerInputStatements(value);
		}
	}

	/**
	 * This method do a parse in the suite value.
	 * 
	 * @param value
	 */
	public void handlerInputTestSuite(String value) {
		if (value.contains(",")){
			 String [] split = value.split(",");
			 
			 String pkg = split[0];
			 String suiteName = split[1];
			 
			 insertInputTestSuite(pkg, suiteName);
		 }
		else{ //in this case the suite name not contain package declaration.
			insertInputTestSuite("", value);
		}
	}
	
	public void handlerInputStatements(String value){
		if (!value.isEmpty()){
			if (value.contains(",")){
				String [] arraySttm = value.split(",");
				
				insertInputStatement(arraySttm);
			}
			else{
				String [] array = {value};
				
				insertInputStatement(array);
			}
		}
	}
	
	public void insertInputStatement(String [] statements){
		TestSuite suite = getLastSuite();
		TestCase test = getLastTest(suite);
		ClassCode classcode = getLastClasscode(test);
		Method method = getLastMethod(classcode);
	
		for (String sttm : statements){
			method.addStatement(new Statement(sttm));
		}
	}
	
	public void handlerInputMethod(String value){
		if (!value.isEmpty()){
			insertInputMethod(value);
		}
	}
	
	public void handlerInputClassCode(String value){
		if (!value.isEmpty()){
			if (value.contains(",")){
				String [] split = value.split(",");
				
				String pkg = split[0];
				String name = split[1];
				
				insertInputClassCode(pkg, name);
			}
			else{
				insertInputClassCode("",value);
			}
		}
	}
	
	public void handlerInputTestCase(String value){
		if (!value.isEmpty()){
			insertInputTestCase(value);
		}
	}
	
	public void insertInputMethod(String methodName){
		TestSuite suite = getLastSuite();
		TestCase test = getLastTest(suite);
		ClassCode classcode = getLastClasscode(test);
	
		Method method = new Method(methodName);
		
		classcode.addMethod(method);
	}
	
	/**
	 * insert a new class code.
	 * 
	 * @param pkgName
	 * @param className
	 */
	public void insertInputClassCode(String pkgName, String className){
		ClassCode classcode = new ClassCode(pkgName,className);
		
		TestSuite suite = getLastSuite();
		TestCase test = getLastTest(suite);
		
		test.addClassCoverage(classcode);
	}
	
	/**
	 * This method get the last test case inserted.
	 * 
	 * @param suite
	 * 		The last test suite.
	 * 
	 * @return
	 * 		The last test case.
	 */
	public TestCase getLastTest(TestSuite suite){
		
		int lastIndex = suite.getTestCases().size() -1;
		
		return suite.getTestCases().get(lastIndex);
	}
	
	/**
	 * This method receive a line in the format "[test_suite_name]:[pkg.pac1,suiteA]"
	 * [property:value], where a value is the [package name , suite name].
	 *  
	 * @param line
	 * 		A string, example "[test_suite_name]:[pkg1.pack, suiteA]"
	 **/
	public void insertInputTestSuite(String pkgName, String suiteName) {
		TestSuite suite = new TestSuite(pkgName,suiteName);
		suites.add(suite);
	}
	
	/**
	 * This method add a test case to last suite inserted.
	 * 
	 * @param testCaseName
	 * 		A test case name.
	 */
	public void insertInputTestCase(String testCaseName){
		TestCase test = new TestCase(testCaseName);
		
		TestSuite suite = getLastSuite();
		suite.addTestCase(test);
	}
	
	
	private TestSuite getLastSuite(){
		int lastIndex = suites.size() - 1;
		
		return suites.get(lastIndex);
	}
	
	private ClassCode getLastClasscode(TestCase test){
		int lastIndex = test.getClassCoverage().size() -1;
		
		return test.getClassCoverage().get(lastIndex);
	}
	
	private Method getLastMethod(ClassCode classcode){
		int lastIndex = classcode.getMethodCoverage().size() - 1;
		
		return classcode.getMethodCoverage().get(lastIndex);
	}
	
	/**
	 * This method do a line parse.
	 * 
	 * @param line	
	 * 		A string with content line.
	 * @return
	 * 		An object with content line.
	 */
	public InputObject lineParse(String line){
		InputObject input = new InputObject();
		
		line = line.trim();
		
		if (line.contains(":"))
			input = extractData(line);
		
		return input;
	}
	
	/**
	 * this method extract data from line.
	 * 
	 * @param line
	 * @return
	 */
	public InputObject extractData(String line){
		
		InputObject obj = new InputObject();
		
		String split[] = line.split(":");
		
		String property = split[0];
		String value = split[1];
		
		property = property.replace("[", "");
		property = property.replace("]", "");
		
		value = value.replace("[", "");
		value = value.replace("]", "");
		
		obj.setProperty(property);
		
		if(value.equals("empty")) 
			obj.setValue("");
		else 
			obj.setValue(value);
		
		return obj;
	}
	
	
	/**
	 * This method get the objects result from parse.
	 * 
	 * @return
	 */
	public List<InputObject> getResult(){
		return listParse;
	}
	/**
	 * This method get the test suite parsed.
	 * 
	 * @return
	 */
	public List<TestSuite> getResultAsSuite(){
		return suites;
	}
	
	/**
	 * This method get all test cases.
	 * 
	 * @return
	 * 		A list of test cases.
	 */
	public List<TestCase> getResultAsTestCase(){
		
		List<TestCase> tests = new ArrayList<TestCase>();
		for (TestSuite suite : suites){
			for (TestCase test : suite.getTestCases()){
				tests.add(test);
			}
		}
		
		return tests;
	}
	
	/**
	 * Get the value associated with this property.
	 * 
	 * @param property
	 * @return
	 */
	public String getValue(Property property){
		return valueToProperty(property.getName());
	}
	
	/**
	 * This method get a object with the informed property.
	 * 
	 * @param property
	 * @return
	 */
	public InputObject getObjectWithProperty(String property){
		for (InputObject obj : listParse){
			if (obj.getProperty().equals(property))
				return obj;
		}
		
		return new InputObject();
	}
	
	/**
	 * This method return the value to informed property.
	 * 
	 * @param property
	 * @return
	 */
	public String valueToProperty(String property){
		InputObject input = getObjectWithProperty(property);
		return input.getValue();
	}

	public String getValue(PropertyTest application) {
		// TODO Auto-generated method stub
		return "";
	}
	
	
	
}
